/** Shopify CDN: Minification failed

Line 18:4 Transforming const to the configured target environment ("es5") is not supported yet
Line 26:4 Transforming const to the configured target environment ("es5") is not supported yet
Line 38:2 Transforming const to the configured target environment ("es5") is not supported yet
Line 40:2 Transforming const to the configured target environment ("es5") is not supported yet
Line 45:2 Transforming const to the configured target environment ("es5") is not supported yet
Line 46:2 Transforming const to the configured target environment ("es5") is not supported yet
Line 47:4 Transforming const to the configured target environment ("es5") is not supported yet
Line 58:0 Transforming const to the configured target environment ("es5") is not supported yet
Line 59:0 Transforming const to the configured target environment ("es5") is not supported yet
Line 61:0 Transforming async functions to the configured target environment ("es5") is not supported yet
... and 5 more hidden warnings

**/
function waitFor(predicate, timeout, retries) {
  return new Promise((resolve, reject) => {
    const check = () => {
      if (!predicate() && (typeof retries === 'number' ? retries >= 0 : true)) {
        retries--;
        return;
      }
      clearInterval(interval);
      resolve();
    };
    const interval = setInterval(check, 100);
    check();

    if (!timeout) return;
    setTimeout(() => {
      clearInterval(interval);
      reject();
    }, timeout);
  });
}

function setCookie(name, value, expDays) {
  const date = new Date();
  date.setTime(date.getTime() + (expDays * 24 * 60 * 60 * 1000));
  const expires = `expires="${date.toUTCString()}`;
  document.cookie = `${name}=${value}; ${expires}; path=/`; 
}

function getCookie(name) {
  const cookieArr = document.cookie.split(";");
  const canJamCookie = cookieArr.find((cookie) => {
    const cookiePair = cookie.split("=");
    return name == cookiePair[0].trim();
  });

  return canJamCookie;
}

function deleteCookie(name) {
  document.cookie = `${name}=; Max-Age=-99999999;`;
}

const CANJAM_PARAM = 'canjam_bonus';
const CANJAM_HANDLE = 'canjam-bonus';

async function canjamInit() {
  const canjamCookie = getCookie(CANJAM_PARAM);

  if (!canjamCookie) {
    return;
  }

  await waitFor(() => window.hasOwnProperty('Gadget'));
  await waitFor(() => window.hasOwnProperty('api'));

  if (window.lantern.customer) {
    await waitFor(() => window.hasOwnProperty('lantern') && window.lantern.hasOwnProperty('isInitialized'), null, 100);
    await api.triggerClientEarnEvent({handle: CANJAM_HANDLE});
    deleteCookie(CANJAM_PARAM);
  }
}

document.addEventListener('DOMContentLoaded', function() {
  const urlParams = new URLSearchParams(window.location.search);
  let paramExists;
  const bonusParam = urlParams.get(CANJAM_PARAM);
  if (bonusParam) {
    paramExists = true;
  };

  const returnParam = urlParams.get('return_url');
  if (returnParam && returnParam.includes(CANJAM_PARAM)) {
    paramExists = true;
  }

  if (paramExists) {
    setCookie(CANJAM_PARAM, 'true', 7);
  }
  
  canjamInit();
});
(function() {

	var docCookies;

	(function() {
		/*\
		|*|
		|*|	:: cookies.js ::
		|*|
		|*|	A complete cookies reader/writer framework with full unicode support.
		|*|
		|*|	Revision #2 - June 13th, 2017
		|*|
		|*|	https://developer.mozilla.org/en-US/docs/Web/API/document.cookie
		|*|	https://developer.mozilla.org/User:fusionchess
		|*|	https://github.com/madmurphy/cookies.js
		|*|
		|*|	This framework is released under the GNU Public License, version 3 or later.
		|*|	http://www.gnu.org/licenses/gpl-3.0-standalone.html
		|*|
		|*|	Syntaxes:
		|*|
		|*|	* docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
		|*|	* docCookies.getItem(name)
		|*|	* docCookies.removeItem(name[, path[, domain]])
		|*|	* docCookies.hasItem(name)
		|*|	* docCookies.keys()
		|*|
		\*/

		docCookies = {
			getItem: function (sKey) {
				if (!sKey) { return null; }
				return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
			},
			setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {
				if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) { return false; }
				var sExpires = "";
				if (vEnd) {
					switch (vEnd.constructor) {
						case Number:
							sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
							break;
						case String:
							sExpires = "; expires=" + vEnd;
							break;
						case Date:
							sExpires = "; expires=" + vEnd.toUTCString();
							break;
					}
				}
				document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
				return true;
			},
			removeItem: function (sKey, sPath, sDomain) {
				if (!this.hasItem(sKey)) { return false; }
				document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
				return true;
			},
			hasItem: function (sKey) {
				if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) { return false; }
				return (new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
			},
			keys: function () {
				var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
				for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }
				return aKeys;
			}
		};
	})();

	var CONTACTID_PARAM = "emfl_c";
	var EMAILID_PARAM = "emfl_e";
	var PAGEID_PARAM = "emfl_p";
	var COOKIE_NAME = "emfl_tr";
	var DEFAULT_AJAX_URL = "https://webtracking.emailer.emfluence.com/log/";
	var DEFAULT_COOKIEDURATIONDAYS = 30;

	var siteKey = "";
	var contactID = "";
	var emailID = "";
	var pageID = "";
	var cookieDurationDays = DEFAULT_COOKIEDURATIONDAYS;
	var visitKey = "";
	var ajaxURL = DEFAULT_AJAX_URL;

	var debugMode = false;

	window.emfl_tracking = window.emfl_tracking || {};

	// get any events that have been queued up before this script loaded
	var eventQueue = window.emfl_tracking.q || [];

	// replace the temporary queue with a function that will process the events immediately
	window.emfl_tracking = function() {
		try {
			var eventName = arguments[0] || "";
			var eventData = arguments[1] || {};

			switch (eventName) {
				case "create":
					create(eventData);
					break;
				case "pageview":
					trackPageView(eventData);
					break;
				/* we are not tracking clicks right now
				case "click":
					trackPageClick(eventData);
					break;
				*/
				case "pageexit":
					trackPageExit(eventData);
					break;
				default:
					log("invalid emfl_tracking event:", eventName);
					break;
			};
		} catch (e) {
			log("ERROR", e);
		}
	};

	// execute any events that were queued
	for (var i = 0; i < eventQueue.length; i++) {
		window.emfl_tracking.apply(undefined, eventQueue[i]);
	};

	function create(data) {
		siteKey = data.siteKey || "";
		debugMode = data.debug || debugMode;
		cookieDurationDays = data.trackingDuration || cookieDurationDays;
		ajaxURL = data.ajaxURL || ajaxURL;

		cookieDurationDays = parseInt(cookieDurationDays);
		if (isNaN(cookieDurationDays) || cookieDurationDays < 1 || cookieDurationDays > 365) {
			cookieDurationDays = DEFAULT_COOKIEDURATIONDAYS;
			log("invalid trackingDuration");
		};

		getTrackingParamsFromQueryString();
		removeTrackingParamsFromQueryString();
		getTrackingParamsFromCookie();
		setTrackingCookie();

		window.addEventListener("unload", function() { window.emfl_tracking("pageexit"); }, false); // automatically track page exits
		//initClickTracking(); // automatically track link clicks
		window.emfl_tracking("pageview"); // automatically log page view

		// only let this get called once
		create = function() {
			log('"create" event has already occurred');
		};

		log('"create" event processed');
	};

	function getTrackingParamsFromQueryString() {
		try {
			contactID = getQueryVariable(CONTACTID_PARAM) || contactID;
			emailID = getQueryVariable(EMAILID_PARAM) || emailID;
			pageID = getQueryVariable(PAGEID_PARAM) || pageID;

			log("query string tracking params: contactID=" + contactID + ", emailID=" + emailID, ", pageID=" + pageID);
		} catch (e) {
			log("ERROR", e);
		};
	};

	function removeTrackingParamsFromQueryString() {
		try {
			var url = new URL(window.location);

			url.searchParams.delete(CONTACTID_PARAM);
			url.searchParams.delete(EMAILID_PARAM);
			url.searchParams.delete(PAGEID_PARAM);

			history.replaceState({}, "", url);

			log("tracking parameters removed from query string");
		} catch (e) {
			log("ERROR", e);
		};
	};

	function getTrackingParamsFromCookie() {
		try {
			// only get the data from the cookie if it has not already been set
			if (contactID.toString().length == 0) {
				if (docCookies.hasItem(COOKIE_NAME)) {
					cookieData = JSON.parse(docCookies.getItem(COOKIE_NAME));
					contactID = cookieData[CONTACTID_PARAM] || contactID;

					log("cookie tracking params: contactID=" + contactID + ", emailID=" + emailID, ", pageID=" + pageID);
				};
			};
		} catch (e) {
			log("ERROR", e)
		};
	};

	function setTrackingCookie() {
		try {
			if (contactID.toString().length == 0) {
				throw("invalid contactID");
			};

			var cookieData = {};
			cookieData[CONTACTID_PARAM] = contactID;

			var cookieDurationSeconds = cookieDurationDays * 24 * 60 * 60;

			docCookies.setItem(COOKIE_NAME, JSON.stringify(cookieData), cookieDurationSeconds, "/"); // TODO: do we want to make the cookie avaialable to all subdomains?

			log("tracking cookie created. expires in " + cookieDurationDays + " days.", docCookies.getItem(COOKIE_NAME));
		} catch (e) {
			log("ERROR", e);
		};
	};

	function trackPageView() {
		if (siteKey.toString().length == 0) {
			throw("invalid siteKey");
		};

		if (contactID.toString().length == 0) {
			throw("invalid contactID");
		};

		if (!window.XMLHttpRequest) {
			log("Browser does not support XMLHttpRequest");
			return;
		};

		var ajaxData = addTrackingParamsToAjaxData({"trackingAction": "pageView"});

		var httpRequest = new XMLHttpRequest();
		httpRequest.onreadystatechange = function() {
			if (httpRequest.readyState === XMLHttpRequest.DONE) {
				if (httpRequest.status === 200) {
					var response = JSON.parse(httpRequest.responseText);
					visitKey = response.visitKey || "";
					if (visitKey.toString().length === 0) {
						log("ERROR", "visitKey not found in response", response);
					};
				} else {
					log("ERROR", httpRequest);
				};
			};
		};
		httpRequest.open("POST", ajaxURL);

		httpRequest.send(JSON.stringify(ajaxData));
		log('"pageview" event processed');
	};

	function trackPageExit() {
		if (visitKey.toString().length == 0) {
			throw("invalid visitKey");
		};

		var ajaxData = addTrackingParamsToAjaxData({"trackingAction": "pageExit"});

		sendBeacon(ajaxURL, ajaxData);
		log('"pageexit" event processed');
	};

/*
	NOTES:
		middle clicks (open in new tab) don't seem to fire this click event - https://stackoverflow.com/questions/21224327/how-to-detect-middle-mouse-button-click
		now that click tracking goes through a redirect, all of the href values look a little crazy...we were going to solve this by adding an attribute to the <a> tags (data-emfl-tracking-href) that would contain the actual href value

	function trackPageClick(data) {
		if (visitKey.toString().length == 0) {
			throw("invalid visitKey");
		};

		var ajaxData = addTrackingParamsToAjaxData({
			"trackingAction": "click",
			"href": data.href
		});

		sendBeacon(ajaxURL, ajaxData);
		log('"click" event processed');
	};

	function initClickTracking() {
		window.addEventListener("click", function(e) {
			if (e.srcElement.tagName.toLowerCase() === "a") {
				var href = e.srcElement.href || "";
				if (href.length > 0) {
					window.emfl_tracking("click", {"href": href});
				};
			};
		});
	};
*/

	function log() {
		try {
			if (debugMode && console.log) {
				Array.prototype.unshift.call(arguments, "emfl_tracking:");
				console.log.apply(undefined, arguments);
			};
		} catch (e) {
			// something is in really bad shape if we got an error while trying to log the error...
		};
	};

	function sendBeacon(url, data) {
		// use the beacon API if the browser supports it
		if (typeof navigator === "object" && typeof navigator.sendBeacon === "function") {
			navigator.sendBeacon(ajaxURL, JSON.stringify(data));
			return;
		}

		// fallback to an synchronous ajax request with a low timeout
		var httpRequest = new XMLHttpRequest();
		httpRequest.open("POST", url, false);
		httpRequest.timeout = 100;
		httpRequest.send(JSON.stringify(data));
	};

	function getQueryVariable(variable) {
		var query = window.location.search.substring(1);
		var vars = query.split('&');
		for (var i = 0; i < vars.length; i++) {
			var pair = vars[i].split('=');
			if (decodeURIComponent(pair[0]) == variable) {
				return decodeURIComponent(pair[1]);
			}
		};
	};

	function addTrackingParamsToAjaxData(data) {
		data.siteKey = siteKey;
		data.referrer = document.referrer;
		data.url = window.location.href;

		data[CONTACTID_PARAM] = contactID;
		data[EMAILID_PARAM] = emailID;
		data[PAGEID_PARAM] = pageID;

		if (visitKey.toString().length > 0) {
			data.visitKey = visitKey;
		};

		return data;
	};

})();
